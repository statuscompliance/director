openapi: 3.0.0
info:
  version: 1.0.0
  title: Task list
  description: >-
    This is an OpenAPI Specification created by oas-wizard
    (https://github.com/pafmon/oas-wizard)  
  contact:
    name: PabloFM
    email: pablofm@us.es
    url: 'http://www.isa.us.es'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
paths:
  /api/v1/tasks:
    get:
      description: Returns all tasks
      operationId: gettasks
      responses:
        '200':
          description: Task List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/task'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      description: Creates a new task
      operationId: addTask
      responses:
        '201':
          description: task created
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task'
        description: Task to be created
        required: true
  '/api/v1/tasks/{id}/status':
    get:
      description: Returns a task status by id
      operationId: findtaskstatusByid
      parameters:
        - name: id
          in: path
          description: id of task to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task returned
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/tasks/{id}/badge':
    get:
      description: Returns a task Badge by id
      operationId: findTaskBadgeByid
      parameters:
        - name: id
          in: path
          description: id of task to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task returned
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/tasks/{id}/run':
    post:
      description: Makes one execution of a task by id
      operationId: runTaskByid
      parameters:
        - name: id
          in: path
          description: id of task to run
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task returned
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/tasks/test':
    post:
      description: Makes one execution of a task by the script JS.
      operationId: runTaskTest
      requestBody:
        description: Script text and config
        x-name: testBody
        required: true
        content:
          application/json:
              schema:
                type: object
      responses:
        '200':
          description: Execution response returned
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/tasks/{id}/status/{action}':
    post:
      description: Update a task status by id
      operationId: updateTaskAction
      parameters:
        - name: id
          in: path
          description: id of task to fetch
          required: true
          schema:
            type: string
        - name: action
          in: path
          description: action to apply to the task
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task returned
          content:
            application/json:
              schema:
                type: object
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/tasks/{id}':
    get:
      description: Returns a task by id
      operationId: findTaskByid
      parameters:
        - name: id
          in: path
          description: id of task to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: deletes a single task based on the id
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: ID of task to delete
          required: true
          schema:
            type: string
      responses:
        '202':
          description: task deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      description: Update a task based on its id
      operationId: updateTask
      parameters:
        - name: id
          in: path
          description: ID of task to put
          required: true
          schema:
            type: string
      responses:
        '204':
          description: task updated
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/task'
        description: Task to be updated
        required: true
components:
  schemas:
    errorModel:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    task:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        script:
          type: string
          minLength: 1
        running:
          type: boolean
        config:
          type: object
        init:
          type: string
          properties: {}
        interval:
          type: number
        end:
          type: string
          properties: {}
      required:
        - script
        - config
        - interval
